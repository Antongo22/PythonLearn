# Массиивы (Списки)
# Заполнить массив нулями, кроме первого и последнего элементов, которые должны быть равны единице.
# Заполнить массив нулями и единицами, при этом данные значения чередуются, начиная с нуля.
# Заполнить массив последовательными нечетными числами, начиная с единицы.
# Сформировать массив из элементов арифметической прогрессии с заданным первым элементом x и разностью d.
# Сформировать возрастающий массив из четных чисел.
# Сформировать убывающий массив из чисел, которые делятся на 3.
# Создать массив из n первых чисел Фибоначчи.
# Заполнить массив заданной длины различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу.
# Создать массив, каждый элемент которого равен квадрату своего номера.
# Создать массив, на четных местах в котором стоят единицы, а на нечетных местах - числа, равные остатку от деления своего номера на 5.
# Найдите наименьший четный элемент массива.
# Среди элементов с нечетными номерами найдите наибольший элемент массива, который делится на 3.
# Дан массив и число p. Найдите два различных числа в массиве, сумма которых наиболее близка к p. (использовать math)
#Найдите сумму чисел массива, которые расположены до первого четного числа массива. Если четных чисел в массиве нет, то найти сумму всех чисел за исключением крайних.
# Дан массив, сделать его сортировку по возрастанию.

# Минимальный и максимальный элемент массива:
# Напишите программу, которая находит и выводит минимальный и максимальный элементы в заданном массиве целых чисел.
#
# Пример:
# Ввод: [4, 1, 7, 0, 3, 5]
# Вывод: Минимальный: 0, Максимальный: 7

# Сортировка массива по возрастанию и убыванию:
# Реализуйте программу, которая сортирует массив по возрастанию и убыванию. Выведите оба варианта сортировки.
#
# Пример:
# Ввод: [4, 2, 9, 1, 5, 6]
# Вывод: По возрастанию: [1, 2, 4, 5, 6, 9], По убыванию: [9, 6, 5, 4, 2, 1]

# Сумма и среднее значение элементов массива:
# Напишите программу, которая вычисляет сумму всех элементов массива и среднее значение этих элементов.
#
# Пример:
# Ввод: [10, 20, 30, 40, 50]
# Вывод: Сумма: 150, Среднее: 30.0

# Поиск дубликатов в массиве:
# Реализуйте программу, которая находит все дубликаты в массиве и выводит их.
#
# Пример:
# Ввод: [1, 3, 2, 3, 4, 1, 5]
# Вывод: Дубликаты: 1, 3

# Сдвиг элементов массива:
# Напишите программу, которая сдвигает все элементы массива на одну позицию вправо. Последний элемент массива должен стать первым.
#
# Пример:
# Ввод: [1, 2, 3, 4, 5]
# Вывод: [5, 1, 2, 3, 4]



# Задача 2: Заполнение матрицы числами по возрастанию
# Создайте двумерный массив размером m x n и заполните его числами по возрастанию, начиная с 1.
#
# Пример:
# Для m = 2 и n = 3 результат должен быть:
# [
#   [1, 2, 3],
#   [4, 5, 6]
# ]


# Задача 3: Подсчет суммы элементов в строке
# Дан двумерный массив размером m x n. Найдите и выведите сумму элементов в каждой строке. После сделать подсчёт по столбцам
#
# Пример:
# Для массива:
# [
#   [1, 2, 3],
#   [4, 5, 6],
#   [7, 8, 9]
# ]
# Результат должен быть: 6, 15, 24.

# Задача 4: Транспонирование матрицы
# Дана матрица размером m x n. Создайте новую матрицу, которая является транспонированной версией исходной, то есть замените строки на столбцы.
#
# Пример:
# Для матрицы:
# [
#   [1, 2, 3],
#   [4, 5, 6]
# ]
# Результат должен быть:
# [
#   [1, 4],
#   [2, 5],
#   [3, 6]
# ]

# Задача 5: Сумма всех элементов двумерного массива
# Дан двумерный массив размером m x n. Найдите сумму всех элементов в массиве.
#
# Пример:
# Для массива:
# [
#   [1, 2, 3],
#   [4, 5, 6],
#   [7, 8, 9]
# ]
# Результат должен быть: 45.




# Строки
# Палиндром:
# Напишите программу, которая проверяет, является ли введенная строка палиндромом (строка, читающаяся одинаково слева направо и справа налево).
#
# Пример:
# Ввод: "level"
# Вывод: "Да, это палиндром."

# Количество слов в строке:
# Напишите программу, которая подсчитывает количество слов в заданной строке.
#
# Пример:
# Ввод: "Hello, world! How are you?"
# Вывод: 5 слов


# Замена подстроки:
# Напишите программу, которая заменяет все вхождения подстроки в строке на другую подстроку.
#
# Пример:
# Ввод: "Hello, world!", замените "world" на "Python"
# Вывод: "Hello, Python!"


# Удаление гласных из строки:
# Напишите программу, которая удаляет все гласные буквы из заданной строки.
#
# Пример:
# Ввод: "This is a test"
# Вывод: "Ths s tst"




# Файлы

# Чтение и вывод содержимого файла:
# Напишите программу, которая открывает текстовый файл, читает его содержимое и выводит его на экран.
#
# Подсказка: Используйте режим "r" для открытия файла и метод read() для чтения всего содержимого.
# Дополнительное задание: Сделайте так, чтобы файл закрывался автоматически после завершения работы с ним.

# Запись строки в файл:
# Напишите программу, которая запрашивает у пользователя строку и записывает ее в текстовый файл. Если файл уже существует, его содержимое должно быть удалено.
#
# Подсказка: Используйте режим "w" для записи в файл.


# Добавление текста в файл:
# Напишите программу, которая запрашивает у пользователя строку и добавляет эту строку в конец текстового файла, не удаляя его предыдущего содержимого.
#
# Подсказка: Используйте режим "a" для добавления текста в файл.

# Подсчет строк в файле:
# Напишите программу, которая открывает текстовый файл и подсчитывает количество строк в нем.
#
# Подсказка: Используйте цикл для построчного чтения файла, и переменную-счетчик для подсчета строк.


# Копирование содержимого одного файла в другой:
# Напишите программу, которая читает содержимое одного текстового файла и записывает его в другой файл.
#
# Подсказка: Откройте первый файл в режиме чтения ("r"), прочитайте его содержимое,
# затем откройте второй файл в режиме записи ("w") и запишите содержимое в него.



# Словари

# Словарь частоты символов:
# Напишите программу, которая принимает строку и подсчитывает количество вхождений каждого символа в этой строке.
# Результат должен быть представлен в виде словаря, где ключи — это символы, а значения — количество их появлений.


# Словарь контактов:
# Создайте программу для управления контактами. Контакты должны храниться в виде словаря, где ключи — имена людей,
# а значения — номера телефонов. Программа должна позволять:
#
# Добавлять новый контакт.
# Обновлять номер телефона существующего контакта.
# Удалять контакт.
# Искать контакт по имени и выводить его номер телефона.


# Переводчик слов:
# Реализуйте программу, которая хранит словарь с переводами слов с английского на русский.
# Программа должна запрашивать у пользователя английское слово и выводить его перевод.
# Если слово отсутствует в словаре, программа должна сообщить об этом пользователю.

# Словарь средних оценок:
# Напишите программу, которая хранит словарь студентов и их оценок (в виде списка).
# Программа должна позволять добавлять новые оценки студенту и рассчитывать средний балл каждого студента.

# Анализ слов в тексте:
# Напишите программу, которая читает текстовый файл и создает словарь, где ключи — это слова,
# а значения — количество раз, которое каждое слово встретилось в тексте.
# Программа должна учитывать регистр и исключать знаки препинания.

# Хранение и чтение данных о студентах:
# Реализуйте программу, которая считывает из файла данные о студентах и их оценках,
# где каждая строка файла содержит имя студента и его оценки через пробел.
# Программа должна сохранить эти данные в словарь, где ключами будут имена студентов, а значениями — списки их оценок.
# После этого программа должна вывести среднюю оценку каждого студента.

#У вас есть файл, где каждая строка содержит пару значений, разделенных пробелом: ключ и значение.
# Напишите программу, которая считывает этот файл и создает из него словарь.
# Затем программа должна предоставить пользователю возможность искать значения по ключам,
# добавлять новые пары и сохранять обновленный словарь обратно в файл.


# Ошибки


# Обработка деления на ноль:
# Напишите программу, которая запрашивает у пользователя два числа и делит одно на другое. Обработайте возможные ошибки:
#
# Деление на ноль (ZeroDivisionError).
# Неправильный ввод (например, введен текст вместо числа, что вызывает ValueError).


# Чтение из файла:
# Напишите программу, которая читает содержимое текстового файла и выводит его на экран. Обработайте ошибки, которые могут возникнуть:
#
# Файл не существует (FileNotFoundError).
# Ошибка при чтении файла (IOError)


# Валидация возраста:
# Создайте программу, которая запрашивает у пользователя возраст и проверяет,
# что он является целым числом и находится в пределах от 0 до 120 лет. Обработайте возможные ошибки:
#
# Неправильный ввод (ValueError).
# Возраст вне допустимого диапазона (ValueError).


# Использование else и finally
# Напишите программу, которая делит два числа. Обработайте возможные ошибки:
#
# Деление на ноль (ZeroDivisionError).
# Неправильный ввод (ValueError).
# Выведите на экран результат деления.



# Финальное задание
# Написать игру "Крестики нолики". Обработать ошибки ввода пользователя. Можно играть вдвоём или против бота (бот играет рандомно)



# Функции

# Задача 1: Приветствие пользователя
# Напишите функцию greet_user(name), которая принимает имя пользователя и выводит приветственное сообщение.


# Задача 2: Функция для вычисления площади прямоугольника
# Напишите функцию, которая принимает длину и ширину прямоугольника и возвращает его площадь.


# Задача 3: Функция для вычисления факториала числа
# Напишите функцию, которая принимает число и возвращает его факториал.


# Задача 4: Функция для проверки четности числа
# Напишите функцию, которая принимает число и возвращает True, если оно четное, и False в противном случае.


# Задача 5: Функция для вывода строки заданное количество раз
# Напишите функцию, которая принимает строку и число, и выводит строку на экран это число раз.


# Задача 6: Функция для нахождения максимального элемента в списке
# Напишите функцию, которая принимает список чисел и возвращает максимальный элемент в списке.


# Задача 7: Функция для проверки палиндрома
# Напишите функцию, которая принимает строку и возвращает True, если строка является палиндромом, и False в противном случае.


# Задача 8: Функция для подсчета количества гласных в строке
# Напишите функцию, которая принимает строку и возвращает количество гласных букв в этой строке. (vowels в питоне это гласные буквы)


# Задача 9: Функция для перевода градусов Цельсия в Фаренгейты
# Напишите функцию, которая принимает температуру в градусах Цельсия и возвращает температуру в градусах Фаренгейта.


# Задача 10: Функция для генерации списка квадратов чисел
# Напишите функцию, которая принимает число n и возвращает список квадратов чисел от 1 до n.




# Задача 1
# Напишите функцию, которая принимает два числа и возвращает их сумму.

# Задача 2
# Напишите функцию, которая принимает строку и выводит ее в верхнем регистре.

# Задача 3
# Напишите функцию, которая принимает список чисел и возвращает их среднее значение. (лямбда)

# Задача 4
# Напишите функцию, которая принимает два числа и возвращает максимальное из них. (лямбда)

# Задача 5
# Напишите функцию, которая проверяет, является ли число четным. (лямбда)

# Задача 6
# Напишите функцию, которая принимает произвольное количество чисел и возвращает их сумму. Используйте *args.

# Задача 7

# Напишите функцию, которая принимает произвольное количество ключевых словарных аргументов и возвращает словарь с этими аргументами.
# Используйте **kwargs.

# Задача 8
# Напишите функцию, которая возвращает квадрат числа. Используйте лямбда-функцию.

# Задача 9
# Напишите рекурсивную функцию для вычисления факториала числа.


# Задача 10
# Напишите функцию-декоратор, которая измеряет время выполнения другой функции и выводит его на экран.

# Задача 11
# Напишите функцию, которая принимает список строк и возвращает только те строки, которые содержат букву "a".

# Задача 12
# Напишите функцию, которая принимает словарь и возвращает список его ключей, отсортированных в алфавитном порядке.

# Задача 13
# Напишите функцию, которая принимает список чисел и возвращает новый список, содержащий только четные числа.
# Используйте фильтрацию с лямбда-функцией.

# Задача 14
# Напишите рекурсивную функцию, которая находит n-й элемент Фибоначчи.

# Задача 15
# Напишите функцию-декоратор, которая логирует вызов функции и ее результат.


# Финальное задание
# Написать игру - виселица. Данные о словах и описаниях, а так же рисунки виселицы должны быть внесены в отдельный файл.