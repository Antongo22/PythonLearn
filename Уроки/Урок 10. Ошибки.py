# Обработка ошибок
# Иерархия исключений

# BaseException
# +-- SystemExit
# +-- KeyboardInterrupt
# +-- Exception
#   +-- ArithmeticError
#     | +-- FloatingPointError
#     | +-- OverflowError
#     | +-- ZeroDivisionError
#   +-- EOFError
#   +-- ImportError
#     +-- ModuleNotFoundError
#   +-- LookupError
#     | +-- IndexError
#     | +-- KeyError
#   +-- NameError
#   +-- OSError
#     | +-- FileExistsError
#     | +-- FileNotFoundError
#     | +-- NotADirectoryError
#   +-- ReferenceError
#   +-- RuntimeError
#   +-- SyntaxError
#     | +-- IndentationError
#   +-- SystemError
#   +-- TypeError
#   +-- ValueError
#   +-- Warning


# BaseException
# Базовый класс всех исключений
# KeyboardInterrupt
# Возбуждается нажатием клавишей прерывания
# SystemExit
# Завершение программы
# Exception
# Базовый класс для всех исключений, не связанных с завершением программы
# StandardError
# Базовый класс всех исключений, наследующих класс Exception
# ArithmeticError
# Базовый класс исключений, возбуждаемых арифметическими операциями
# FloatingPointError
# Ошибка операции с плавающей точкой
# ZeroDivisionError
# Деление или деления по модулю на ноль
# AttributeError
# Возбуждается при обращении к несуществующему атрибуту
# EnvironmentError
# Ошибка, обусловленная внешними причинами
# IOError
# Ошибка ввода-вывода при работе с файлами
# OSError
# Ошибка операционной системы
# EOFError
# Возбуждается по достижении конца файла
# ImportError
# Ошибка в инструкции import
# LookupError
# Ошибка обращения по индексу или ключу
# IndexError
# Ошибка обращения по индексу за пределами последовательности
# KeyError
# Ошибка обращения к несуществующему ключу словаря
# NameError
# Не удалось отыскать локальное или глобальное имя
# UnboundLocalError
# Ошибка обращения к локальной переменной, которой еще не было присвоено значение
# ReferenceError
# Ошибка обращения к объекту, который уже был уничтожен
# RuntimeError
# Универсальное исключение
# NotImplementedError
# Обращение к нереализованному методу или функции
# SyntaxError
# Синтаксическая ошибка
# IndentationError
# Ошибка оформления отступов
# SystemError
# Нефатальная системная ошибка в интерпретаторе
# TypeError
# Попытка выполнить операцию над аргументом недопустимого типа
# ValueError
# Недопустимый тип


# Обработка исключений
try:
    x = int(input("Введите число: "))
    result = 10 / x
    print(f"Результат: {result}")
except ZeroDivisionError:
    print("Ошибка: Деление на ноль!")
except ValueError:
    print("Ошибка: Введено не число!")


# Использование else и finally

# else: Этот блок выполняется, если код в try завершился успешно, т.е. не вызвал исключения.
#
# finally: Этот блок выполняется в любом случае — и если было исключение, и если его не было.
# Его часто используют для очистки ресурсов (например, закрытия файлов).

try:
    x = int(input("Введите число: "))
    result = 10 / x
except ZeroDivisionError:
    print("Ошибка: Деление на ноль!")
except ValueError:
    print("Ошибка: Введено не число!")
else:
    print(f"Результат: {result}")
finally:
    print("Завершение работы программы.")


# Перехват нескольких исключений
try:
    x = int(input("Введите число: "))
    result = 10 / x
except (ZeroDivisionError, ValueError):
    print("Ошибка: Некорректный ввод!")


# Исключение без указания типа
try:
    x = int(input("Введите число: "))
    result = 10 / x
except:
    print("Произошла ошибка!")



# Генерация собственных исключений


a = 10
b = 10
try:
    if b == 0:
        raise ValueError("Делитель не может быть равен нулю.")
    print(a / b)
except ValueError as e:
    print(f"Ошибка: {e}")

# Заключение
# Обработка ошибок — это способ делать ваши программы более устойчивыми к непредвиденным ситуациям,
# что особенно важно в реальных приложениях.
# Применяя обработку ошибок, вы можете предусмотреть разные сценарии работы программы и
# корректно реагировать на возможные сбои, обеспечивая тем самым ее надежность и стабильность.


# Ошибки


# Обработка деления на ноль:
# Напишите программу, которая запрашивает у пользователя два числа и делит одно на другое. Обработайте возможные ошибки:
#
# Деление на ноль (ZeroDivisionError).
# Неправильный ввод (например, введен текст вместо числа, что вызывает ValueError).


# Чтение из файла:
# Напишите программу, которая читает содержимое текстового файла и выводит его на экран. Обработайте ошибки, которые могут возникнуть:
#
# Файл не существует (FileNotFoundError).
# Ошибка при чтении файла (IOError)


# Валидация возраста:
# Создайте программу, которая запрашивает у пользователя возраст и проверяет,
# что он является целым числом и находится в пределах от 0 до 120 лет. Обработайте возможные ошибки:
#
# Неправильный ввод (ValueError).
# Возраст вне допустимого диапазона (ValueError).


# Использование else и finally
# Напишите программу, которая делит два числа. Обработайте возможные ошибки:
#
# Деление на ноль (ZeroDivisionError).
# Неправильный ввод (ValueError).
# Выведите на экран результат деления.



# Финальное задание
# Написать игру "Крестики нолики". Обработать ошибки ввода пользователя. Можно играть вдвоём или против бота (бот играет рандомно)

