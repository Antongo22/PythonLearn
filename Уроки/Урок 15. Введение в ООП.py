# Поздравляю! Ты добралась до самого важного раздела, изучив который ты смело можешь говорить, что ты - программист.
# Но, не расслабляйся, это по совместительству и самый сложный раздел, но я в тебя верю.
# Что же такое ООП (Объектно-ориентированное программирование)?
# Объектно-ориентированное программирование – методология программирования,
# основанная на представлении программы в виде совокупности объектов,
# каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования

# Например, представим объект - человек. Характеристик у него много, но мы ограничемся: имени, возраста, цветом глаз,
# цветом волос и ростом. Как ты догадалась, все эти данные можно поместить в переменные. Так же, человек может что-то делат.
# Для наглядности мы возьмём твои любимые действия: есть, спать и гулять с кем-то (этот кто-то я, кстати).
# Давай напишем такой класс в Python

class Person:
    # Параметр self можно заменить на любой другой, но принято так.
    # Он указывает на собственный элемент класса по умолчанию, его не нужно указывать при вызове методов.
    # Методы - функции, которые находятся внутри класса. Вызываются через точку, кроме уже встроенных в класс
    # Методы могут принимать параметры.

    count = 0 # общий экземпляр класса на всех экземплярах. Называются такие поля - статичными.

    # Для того, чтобы у класса был статичный метод, нужен специальный декоратор
    # Тут мы получаем общее количество созданных нами людей
    @staticmethod
    def static_count():
        return Person.count # такое обращение к статичным полям, тк они не имеют конкретного экземпляра

    # Конструктор класса. Всегда вызывается при создании класса, может как принимать параметры, так и не принимать. (встроенный)
    def __init__(self, name, age, eye_color, hair_color, height, partner):
        # В конструкторе мы задаем значения переменных экземпляра.
        # Если их задать вне конструктора, то эта переменная будет общая для всех экземпляров класса

        self.name = name # имя
        self.age = age # возраст
        self.eye_color = eye_color # цвет глаз
        self.hair_color = hair_color # цвет волос
        self.height = height # рост
        self.partner = partner # вторая половинка

        Person.count += 1 # Прибавляем общее количество созданных нами людей

    # Методы - функции, которые находятся внутри класса. Вызываются через точку, кроме уже встроенных в класс
    # Методы могут принимать параметры.

    # Метод, который кормит имя человека
    def eat(self, food):
        print(f"{self.name} ест {food}.")

    # Метод, который отвечает за сон человека
    def sleep(self, time):
        print(f"{self.name} спит {time} часов.")

    # Метод, который отвечает за прогулку
    def walk(self, person):
        # Если человек, с которым гуляет наш экземпляр - он сам, то мы выведем сообщение о себе
        if person == self:
            print(f"{self.name} гуляет с собой. Возможно, у {self.name} нет друга(")
        # Если человек, с которым гуляет наш экземпляр - воторая половинка, то мы выведем сообщение о нем
        elif person == self.partner:
            print(f"{self.name} гуляет со второй половинкой, по имени {person} .")
        # Если человек, с которым гуляет наш экземпляр - не сам и не вторая половинка, то мы выведем сообщение о нем
        else:
            print(f"{self.name} гуляет с {person}. {person} ревнует!!!!")


    # Метод, который выведет нам полную информацию о человеке
    def info(self):
        print(f"Имя: {self.name}\nВозраст: {self.age}\nЦвет глаз: {self.eye_color}\nЦвет волос: {self.hair_color}\nРост: {self.height}\n")


    # Метод для вывода имен о человеке. Вызывается, когда мы хотим переобразовать объект в строку. (встроенный)
    def __str__(self):
        return self.name