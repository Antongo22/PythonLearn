# Словари

# Словари (или dict — от английского "dictionary") в Python — это структура данных,
# которая позволяет хранить пары "ключ — значение".
# Это означает, что для каждого элемента в словаре есть уникальный ключ,
# с помощью которого можно получить доступ к соответствующему значению.
# Словари очень удобны для хранения и быстрого поиска данных по ключу.

my_dict = {} # Создание пустого словаря

my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York"
} # Создание словаря с элементами

my_dict = dict(name="Alice", age=25, city="New York") # Создание словаря с элементами через функцию dict()


# Доступ к элементам словаря
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York"
}

print(my_dict["name"]) # "Alice"
print(my_dict["age"]) # 25
print(my_dict["city"]) # "New York"


# Если попытаться обратиться к несуществующему ключу, будет вызвана ошибка KeyError. Чтобы этого избежать, можно использовать метод get:
print(my_dict.get("country", "Not Found"))  # Вывод: Not Found


# Добавление и изменение элементов
my_dict["email"] = "alice@example.com"  # Добавление новой пары
my_dict["age"] = 26  # Изменение существующего значения


# Удаление элемента по ключу:
del my_dict["age"]

# Удалиние и возврат элимента
age = my_dict.pop("age")
print(age)  # Вывод: 26

# Очистка всего словаря
my_dict.clear()

# Проверка наличия ключа:
if "name" in my_dict:
    print("Ключ 'name' существует")

# Перебор ключей и значений:
for key in my_dict:
    print(key, my_dict[key])

# Или использовать методы items(), keys(), values()
for key, value in my_dict.items():
    print(f"{key}: {value}")

# Получение всех ключей или всех значений:
keys = my_dict.keys()      # Возвращает список всех ключей
values = my_dict.values()  # Возвращает список всех значений


# Подсчет количества вхождений элементов
text = "hello world"
char_count = {}

for char in text:
    if char in char_count:
        char_count[char] += 1
    else:
        char_count[char] = 1

print(char_count)

# Словари часто используются для хранения настроек и конфигураций:
config = {
    "host": "localhost",
    "port": 8080,
    "debug": True
}


# Вложенные словари

students = {
    "Alice": {"age": 25, "city": "New York"},
    "Bob": {"age": 22, "city": "Los Angeles"}
}

print(students["Alice"]["city"])  # Вывод: New York


# Полезные методы словарей

my_dict.update({"country": "USA", "city": "Boston"}) # update() — обновляет словарь, добавляя пары из другого словаря
my_dict.setdefault("age", 30) # setdefault() — возвращает значение ключа, если ключ существует,
# или устанавливает значение по умолчанию и возвращает его, если ключ не существует




# Словари

# Словарь частоты символов:
# Напишите программу, которая принимает строку и подсчитывает количество вхождений каждого символа в этой строке.
# Результат должен быть представлен в виде словаря, где ключи — это символы, а значения — количество их появлений.


# Словарь контактов:
# Создайте программу для управления контактами. Контакты должны храниться в виде словаря, где ключи — имена людей,
# а значения — номера телефонов. Программа должна позволять:
#
# Добавлять новый контакт.
# Обновлять номер телефона существующего контакта.
# Удалять контакт.
# Искать контакт по имени и выводить его номер телефона.


# Переводчик слов:
# Реализуйте программу, которая хранит словарь с переводами слов с английского на русский.
# Программа должна запрашивать у пользователя английское слово и выводить его перевод.
# Если слово отсутствует в словаре, программа должна сообщить об этом пользователю.

# Словарь средних оценок:
# Напишите программу, которая хранит словарь студентов и их оценок (в виде списка).
# Программа должна позволять добавлять новые оценки студенту и рассчитывать средний балл каждого студента.

# Анализ слов в тексте:
# Напишите программу, которая читает текстовый файл и создает словарь, где ключи — это слова,
# а значения — количество раз, которое каждое слово встретилось в тексте.
# Программа должна учитывать регистр и исключать знаки препинания.

# Хранение и чтение данных о студентах:
# Реализуйте программу, которая считывает из файла данные о студентах и их оценках,
# где каждая строка файла содержит имя студента и его оценки через пробел.
# Программа должна сохранить эти данные в словарь, где ключами будут имена студентов, а значениями — списки их оценок.
# После этого программа должна вывести среднюю оценку каждого студента.

#У вас есть файл, где каждая строка содержит пару значений, разделенных пробелом: ключ и значение.
# Напишите программу, которая считывает этот файл и создает из него словарь.
# Затем программа должна предоставить пользователю возможность искать значения по ключам,
# добавлять новые пары и сохранять обновленный словарь обратно в файл.